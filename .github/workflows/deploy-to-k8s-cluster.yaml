name: Deploy Helm Charts To Kubernetes Cluster

on:
  workflow_call:
    inputs:
      gke_zone:
        required: false
        type: string
        default: "europe-west3"
      gke_cluster:
        required: true
        type: string
        description: "Kubernetes Cluster Name"
        default: "internal"
      stage:
        required: true
        type: string
        description: "dev, staging, prod, etc."
        default: "dev"
      override_values_stage:
        required: false
        type: string
        description: "Override stage value for passing values file. e.g values.<override_values_stage>.yaml"
        default: ""
      chart_name:
        required: false
        type: string
        description: "Helm chart name."
        default: "usc-test-helm"
      chart_version:
        required: false
        type: string
        description: "Helm chart version to deploy. Defaults to latest."
        default: "latest"
      image_version:
        required: false
        type: string
        description: "The docker image you want to deploy. Defaults to latest."
        default: "latest"
      namespace:
        required: true
        type: string
        description: "Kubernetes namespace"
        default: "default"
      sops:
        required: false
        type: boolean
        description: "Enable/Disable Helm Secrets(sops) Plugin"
        default: false
      chart_path:
        required: false
        type: string
        description: "Chart location defaults to ."
        default: "."
      project_id:
        required: false
        type: string
        description: "Project id for gcloud (whenever you deploy to)."
        default: "urbansportsclub-dev"
      registry_project_id:
        required: false
        type: string
        description: "Project id for gcloud registry (currently always dev)."
        default: "urbansportsclub-dev"        
      helm_args:
        required: false
        type: string
        description: "Additional Helm arguments"
      helm_repositories:
        required: false
        type: string
        description: "JSON object of Helm repositories, keys as repo name and value as repo URL"
      runner:
        required: false
        type: string
        description: "Runner type [ deploy, deploylive ] (Default deploy)."
        default: "deploy"


jobs:
  deploy-to-k8s:
    name: Deploy to Kubernetes Cluster
    runs-on: [self-hosted, "${{ inputs.runner }}"]
    environment: ${{ inputs.stage }}
    steps:
      - uses: actions/checkout@v4

      # Set up k8s for dev cluster
      - name: Set up K8s config
        run: |-
          gcloud container clusters get-credentials ${{ inputs.gke_cluster }} --region ${{ inputs.GKE_ZONE }} --project ${{ inputs.project_id }}

      # Get stage value from override_values_stage
      # GITHUB_ENV is environment file and variables from GITHUB_ENV can be accessed by `env`.
      - name: Get stage value
        run: |-
          if [ "${{ inputs.override_values_stage }}" == "" ]; then
            echo "VALUES_STAGE=${{ inputs.stage }}" >> $GITHUB_ENV
          else
            echo "VALUES_STAGE=${{ inputs.override_values_stage }}" >> $GITHUB_ENV
          fi

      # Configure gcloud Auth
      - name: Configure gcloud Auth
        run: |-
          gcloud auth print-access-token --project ${{ inputs.registry_project_id }} | helm registry login -u oauth2accesstoken --password-stdin https://europe-west3-docker.pkg.dev

      # Define additional Helm repositories
      - name: Define Helm repositories
        if: inputs.helm_repositories != ''
        run: |-
          set -x
          HELM_REPOS=$(echo '${{ inputs.helm_repositories }}' | jq -r 'to_entries[] | "\(.key) \(.value)"')
          ORIG_IFS=$IFS
          IFS=$'\n'
          read -d '' -r -a HELM_REPO_ARGS < <(echo $HELM_REPOS && printf '\0')
          for args in ${HELM_REPO_ARGS[@]}; do
            IFS=$ORIG_IFS
            read -d '' -r -a ARGS < <(echo $args && printf '\0')
            helm repo add ${ARGS[@]}
          done

      # Extract project name and team from catalog-info.yaml
      - name: Extract project info from catalog
        id: catalog-info
        run: |-
          # Extract the first Component's metadata.name and spec.owner from catalog-info.yaml
          PROJECT_NAME=$(yq eval 'select(.kind == "Component") | .metadata.name' catalog-info.yaml | head -1)
          TEAM_OWNER=$(yq eval 'select(.kind == "Component") | .spec.owner' catalog-info.yaml | head -1)
          
          # Debug: Show what we extracted
          echo "Raw PROJECT_NAME: '$PROJECT_NAME'"
          echo "Raw TEAM_OWNER: '$TEAM_OWNER'"
          
          # Check if values are empty and provide defaults
          if [ -z "$PROJECT_NAME" ] || [ "$PROJECT_NAME" = "null" ]; then
            echo "Warning: PROJECT_NAME is empty or null"
            PROJECT_NAME="unknown"
          fi
          
          if [ -z "$TEAM_OWNER" ] || [ "$TEAM_OWNER" = "null" ]; then
            echo "Warning: TEAM_OWNER is empty or null"
            TEAM_OWNER="unknown"
          fi
          
          # Fetch hive information from Backstage API
          echo "Fetching hive information for team: $TEAM_OWNER"
          HIVE_VALUE="unknown"  # Default value
          
          if [ "$TEAM_OWNER" != "unknown" ]; then
            # Debug: Check if the secret is available (without exposing the actual value)
            if [ -z "${{ secrets.BACKSTAGE_CATALOG_KEY }}" ]; then
              echo "ERROR: BACKSTAGE_CATALOG_KEY secret is not set or empty"
              HIVE_VALUE="unknown"
            else
              echo "BACKSTAGE_CATALOG_KEY secret is available"
              
              # Make API call to Backstage to get the team's hive
              echo "Making API call to: https://backstage.svc.urbansportsclub.tech/api/catalog/entities/by-name/group/default/$TEAM_OWNER"
              
              # Use curl with more verbose error reporting
              API_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -H "Authorization: Bearer ${{ secrets.BACKSTAGE_CATALOG_KEY }}" \
                "https://backstage.svc.urbansportsclub.tech/api/catalog/entities/by-name/group/default/$TEAM_OWNER" 2>&1 || echo "CURL_ERROR")
              
              if [ -n "$API_RESPONSE" ] && [ "$API_RESPONSE" != "CURL_ERROR" ]; then
                # Extract HTTP status from response
                HTTP_STATUS=$(echo "$API_RESPONSE" | grep "HTTP_STATUS:" | cut -d: -f2)
                RESPONSE_BODY=$(echo "$API_RESPONSE" | sed '/HTTP_STATUS:/d')
                
                echo "HTTP Status: $HTTP_STATUS"
                echo "API Response received for team $TEAM_OWNER"
                echo "Sample of API response: $(echo "$RESPONSE_BODY" | head -c 200)..."
                
                # Check HTTP status and response content
                if [ "$HTTP_STATUS" = "200" ]; then
                  echo "Success: API returned 200 OK"
                  
                  # Extract the hive value from the response body using multiple approaches
                  # Try approach 1: Look for the exact pattern
                  HIVE_VALUE=$(echo "$RESPONSE_BODY" | grep -o '"urbansportsclub/hive"[[:space:]]*:[[:space:]]*"[^"]*"' | sed 's/.*"urbansportsclub\/hive"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/' || echo "")
                  
                  # Try approach 2: More flexible pattern if first approach fails
                  if [ -z "$HIVE_VALUE" ]; then
                    HIVE_VALUE=$(echo "$RESPONSE_BODY" | grep -o 'urbansportsclub/hive[^:]*:[^"]*"[^"]*"' | sed 's/.*"\([^"]*\)".*/\1/' || echo "")
                  fi
                  
                  # Try approach 3: Even simpler pattern
                  if [ -z "$HIVE_VALUE" ]; then
                    HIVE_VALUE=$(echo "$RESPONSE_BODY" | grep 'urbansportsclub/hive' | sed 's/.*"urbansportsclub\/hive"[^"]*"\([^"]*\)".*/\1/' || echo "")
                  fi
                  
                  # Fallback to unknown if still empty
                  if [ -z "$HIVE_VALUE" ]; then
                    HIVE_VALUE="unknown"
                    echo "Warning: Could not extract hive value from API response"
                  fi
                elif [ "$HTTP_STATUS" = "401" ]; then
                  echo "ERROR: Unauthorized (401) - The BACKSTAGE_CATALOG_KEY token may be invalid or expired"
                  HIVE_VALUE="unknown"
                elif [ "$HTTP_STATUS" = "404" ]; then
                  echo "ERROR: Team '$TEAM_OWNER' not found (404) in Backstage"
                  HIVE_VALUE="unknown"
                else
                  echo "ERROR: API returned HTTP status $HTTP_STATUS"
                  HIVE_VALUE="unknown"
                fi
                
                echo "Extracted hive value: '$HIVE_VALUE'"
              else
                echo "Warning: Failed to fetch team information from Backstage API for team: $TEAM_OWNER"
                if [ "$API_RESPONSE" = "CURL_ERROR" ]; then
                  echo "CURL command failed - check network connectivity or API endpoint"
                else
                  echo "Empty or invalid API response received"
                fi
                HIVE_VALUE="unknown"
              fi
            fi
          fi
          
          echo "project-name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "team-owner=$TEAM_OWNER" >> $GITHUB_OUTPUT
          echo "hive-value=$HIVE_VALUE" >> $GITHUB_OUTPUT
          echo "Final extracted project name: $PROJECT_NAME"
          echo "Final extracted team owner: $TEAM_OWNER"
          echo "Final extracted hive value: $HIVE_VALUE"

      # Build dependency for helm-library
      - name: Helm dependency build
        run: |-
          for i in `ls -1 charts/`; do
            helm dependency build charts/$i/
          done

      # Deploy to the GKE cluster - with sops
      - name: Deploy
        if: inputs.sops == true
        run: |-
          # Debug: Show the values being passed to Helm
          echo "Deploying with owner.project=${{ steps.catalog-info.outputs.project-name }}"
          echo "Deploying with owner.team=${{ steps.catalog-info.outputs.team-owner }}"
          echo "Deploying with owner.hive=${{ steps.catalog-info.outputs.hive-value }}"
          
          helm secrets upgrade --install ${{ inputs.chart_name }} ${{ inputs.chart_path }} -n ${{ inputs.namespace }} --create-namespace -f ${{ inputs.chart_path }}/values.yaml -f ${{ inputs.chart_path }}/values.${{ env.VALUES_STAGE }}.yaml -f ${{ inputs.chart_path }}/secrets.${{ inputs.stage }}.yaml --set image.tag=${{ inputs.image_version }} --set owner.project=${{ steps.catalog-info.outputs.project-name }} --set owner.team=${{ steps.catalog-info.outputs.team-owner }} --set owner.hive=${{ steps.catalog-info.outputs.hive-value }} ${{ inputs.helm_args }}

      # Deploy to the GKE cluster - without sops
      - name: Deploy
        if: inputs.sops == false
        run: |-
          # Debug: Show the values being passed to Helm
          echo "Deploying with owner.project=${{ steps.catalog-info.outputs.project-name }}"
          echo "Deploying with owner.team=${{ steps.catalog-info.outputs.team-owner }}"
          echo "Deploying with owner.hive=${{ steps.catalog-info.outputs.hive-value }}"
          
          helm upgrade --install ${{ inputs.chart_name }} ${{ inputs.chart_path }} -n ${{ inputs.namespace }} --create-namespace -f ${{ inputs.chart_path }}/values.yaml -f ${{ inputs.chart_path }}/values.${{ env.VALUES_STAGE }}.yaml --set image.tag=${{ inputs.image_version }} --set owner.project=${{ steps.catalog-info.outputs.project-name }} --set owner.team=${{ steps.catalog-info.outputs.team-owner }} --set owner.hive=${{ steps.catalog-info.outputs.hive-value }} ${{ inputs.helm_args }}
