---
name: Terraform Plan
on:
  workflow_call:
    inputs:
      terraform_path:
        required: false
        type: string
        description: "Path for Terraform files"
        default: "terraform/"
      tf_args:
        required: false
        type: string
        description: "Additional Terraform variables"
        default: ""

permissions:
  id-token: write
  contents: read
  pull-requests: write
  statuses: write

jobs:
  terraform:
    name: Terraform
    runs-on: [terraform]
    if: (github.actor != 'dependabot') || (github.actor == 'dependabot' && contains(github.event.pull_request.labels.*.name, 'safe-to-test'))

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Change directory to the Terraform path
        run: cd ${{ inputs.terraform_path }}

      - name: Check Terraform format
        run: terraform fmt -check
        continue-on-error: true

      - name: Init Terraform
        run: terraform init

      - name: Validate Terraform
        run: terraform validate -no-color

      - name: Plan Terraform
        id: plan
        run: terraform plan -no-color ${{ inputs.tf_args }} -out workspace.plan
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Plan Terraform Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
