name: Unit Tests - NPM
on:
  workflow_call:
    inputs:
      REPO_NAME:
        required: true
        type: string
      USE_CODECOV:
        default: true
        required: false
        type: boolean
      UPLOAD_ARTIFACTS:
        default: false
        required: false
        type: boolean
      WORKING_DIRECTORY:
        description: Working directory path.
        default: "."
        required: false
        type: string
      PACKAGE_MANAGER:
        description: Package manager to install dependencies with (`npm` or `yarn`).
        default: "npm"
        required: false
        type: string
    secrets:
      GH_PACKAGES_TOKEN:
        required: true
      CODECOV_TOKEN:
        required: false

jobs:
  unit_tests:
    name: Unit Tests (RTL/Jest)
    defaults:
      run:
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
    runs-on: [self-hosted, deploy]
    env:
      NODE_CMD_MODE: ""

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Setup NODE_CMD_MODE env var
        run: |
          if [ "${{ inputs.PACKAGE_MANAGER }}" == 'npm' ] && { [ -f "${{ inputs.WORKING_DIRECTORY }}/package-lock.json" ]; }; then
            echo "NODE_CMD_MODE=npm" >> $GITHUB_ENV
          elif [ "${{ inputs.PACKAGE_MANAGER }}" == 'yarn' ] && [ -f "${{ inputs.WORKING_DIRECTORY }}/yarn.lock" ]; then
            echo "NODE_CMD_MODE=yarn" >> $GITHUB_ENV
          else
            echo "Unknown package manager usage OR no lock files found within working dir"
          fi

      - if: ${{ env.NODE_CMD_MODE == 'yarn' }}
        name: Conditional Yarn install for runner if used
        run:  npm -g install yarn

      # Restore Node cache
      - name: Restore `node_modules` cache
        env:
          LOCK_FILE: ${{ env.NODE_CMD_MODE == 'npm' && '${{ inputs.WORKING_DIRECTORY }}/package-lock.json' || '${{ inputs.WORKING_DIRECTORY }}/yarn.lock' }}
        uses: actions/cache@v4
        id: node-cache
        with:
          path: ${{ inputs.WORKING_DIRECTORY }}/node_modules
          key: node-cache-${{ runner.os }}-${{ hashFiles(env.LOCK_FILE) }}

      - name: List Directory Files
        run: ls -la

      # Set Node version (requires .nvmrc file in the root of repository)
      - name: Set Node version
        uses: actions/setup-node@v4
        with:
          node-version-file: ${{ inputs.WORKING_DIRECTORY }}/.nvmrc
          registry-url: "https://npm.pkg.github.com"
          cache: ${{ env.NODE_CMD_MODE }}

      # Installing dependencies
      - if: ${{ steps.node-cache.outputs.cache-hit != 'true' }}
        name: Install Dependencies
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
          INSTALL_ARGS: ${{ env.NODE_CMD_MODE == 'npm' && 'ci' || env.NODE_CMD_MODE == 'yarn' && '--frozen-lockfile' || 'install' }}
        run: ${{ format('{0} {1}', env.NODE_CMD_MODE, env.INSTALL_ARGS) }}

      # Running test command
      - name: Run test script command
        run: ${{ ((inputs.PACKAGE_MANAGER == 'npm') && 'npm run') || 'yarn' }} test

      # CodeCov testing coverage uploads
      - name: Codecov
        if: ${{ inputs.USE_CODECOV }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          flags: Jest
          name: ${{ inputs.REPO_NAME }}
          fail_ci_if_error: true
          verbose: true

      - name: Upload coverage artifacts to `${{ inputs.WORKING_DIRECTORY }}/coverage/test-artifacts`
        uses: actions/upload-artifact@v4
        if: ${{ inputs.UPLOAD_ARTIFACTS }}
        with:
          name: test-artifacts
          path: ${{ inputs.WORKING_DIRECTORY }}/coverage
