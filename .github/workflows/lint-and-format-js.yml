name: Linting and Formatting
on:
  workflow_call:
    inputs:
      WORKING_DIRECTORY:
        description: Working directory path.
        default: "."
        required: false
        type: string
      LINT_CMD_FLAG:
        description: Optional flag to pass to `lint` command script (e.g. :ci / :watch / :all, etc.)
        required: false
        type: string
      FORMAT_CMD_FLAG:
        description: Optional flag to pass to `formant` command script (e.g. :ci / :watch / :check, etc.)
        required: false
        type: string
    secrets:
      GH_PACKAGES_TOKEN:
        required: true

jobs:
  lint-and-format:
    name: ESLint and Prettier formatting
    runs-on: [self-hosted, nonroot]
    env:
      NODE_CMD_MODE: ""
      LOCK_FILE: ""

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Setup NODE_CMD_MODE/LOCK_FILE values
        run: |
          if [ -f "${{ inputs.WORKING_DIRECTORY }}/yarn.lock" ]; then
            echo "NODE_CMD_MODE=yarn" >> $GITHUB_ENV
            echo "LOCK_FILE=${{ inputs.WORKING_DIRECTORY }}/yarn.lock" >> $GITHUB_ENV
          elif [ -f "${{ inputs.WORKING_DIRECTORY }}/pnpm-lock.yaml" ]; then
            echo "NODE_CMD_MODE=pnpm" >> $GITHUB_ENV
            echo "LOCK_FILE=${{ inputs.WORKING_DIRECTORY }}/pnpm-lock.yaml" >> $GITHUB_ENV
          else
            echo "NODE_CMD_MODE=npm" >> $GITHUB_ENV
            echo "LOCK_FILE=${{ inputs.WORKING_DIRECTORY }}/package-lock.json" >> $GITHUB_ENV
          fi

      # Restore NPM cache
      - name: Restore node_modules cache
        uses: actions/cache@v4
        id: node-cache
        with:
          path: ${{ inputs.WORKING_DIRECTORY }}/node_modules
          key: node-cache-${{ runner.os }}-${{ hashFiles(env.LOCK_FILE) }}

      - name: Set Node version
        uses: actions/setup-node@v4
        with:
          node-version-file: ${{ inputs.WORKING_DIRECTORY }}/.nvmrc
          registry-url: "https://npm.pkg.github.com"

      - if: ${{ env.NODE_CMD_MODE == 'yarn' }}
        name: Conditional Yarn install for runner if used
        run:  npm -g install yarn

      - if: ${{ env.NODE_CMD_MODE == 'pnpm' }}
        name: Conditional setup PNPM for runner
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install Dependencies
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
          INSTALL_ARGS: ${{ env.NODE_CMD_MODE == 'yarn' && '--frozen-lockfile' || env.NODE_CMD_MODE == 'pnpm' && 'install' || 'ci' }}
        run: ${{ format('{0} {1}', env.NODE_CMD_MODE, env.INSTALL_ARGS) }}

      # Run Linter
      - name: ESLint
        env:
          PKG_CMD: ${{ env.NODE_CMD_MODE == 'npm' && 'npm run' || env.NODE_CMD_MODE }}
        run: ${{ format('{0} {1} {2}', env.PKG_CMD, 'lint', inputs.LINT_CMD_FLAG) }}
      
      # Run Formatter
      - name: Prettier
        env:
          PKG_CMD: ${{ env.NODE_CMD_MODE == 'npm' && 'npm run' || env.NODE_CMD_MODE }}
        run: ${{ format('{0} {1} {2}', env.PKG_CMD, 'format', inputs.LINT_CMD_FLAG) }}
