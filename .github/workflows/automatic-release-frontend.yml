---
name: Create Tag and GitHub release for frontend projects
on:
  workflow_call:
    inputs:
      changelog: 
        description: 'Whether to automatically generate release notes from commits and PRs. Set to false to create release without notes.'
        required: false
        type: boolean
        default: true
      package_path:
        description: 'Path to directory containing package.json file. Examples: "." for root, "packages/components" for monorepo. If not provided, automatically detects from merged PR changes.'
        required: false
        type: string
      tag_prefix:
        description: 'Prefix for git tag format. Examples: "v" creates "v1.0.0" tags, "components" creates "components/1.0.0" tags for monorepos.'
        required: false
        type: string
        default: 'v'

permissions:
  contents: write

jobs:
  create_release:
    runs-on: [self-hosted, dind]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect package path
        id: detect-path
        run: |
          if [[ -n "${{ inputs.package_path }}" ]]; then
            # Use explicitly provided package path
            PACKAGE_DIR="${{ inputs.package_path }}"
            echo "Using provided path: $PACKAGE_DIR"
          else
            # Auto-detect from recent changes (only for PR events)
            if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
              CHANGED_PACKAGE_JSON=$(git diff --name-only HEAD~1 HEAD | grep "package\.json$" | head -1)
              if [[ -n "$CHANGED_PACKAGE_JSON" ]]; then
                PACKAGE_DIR=$(dirname "$CHANGED_PACKAGE_JSON")
                echo "Auto-detected from PR changes: $PACKAGE_DIR"
              else
                PACKAGE_DIR="."
                echo "No package.json found in PR changes, using root directory"
              fi
            else
              PACKAGE_DIR="."
              echo "Not a merged PR event, using root directory"
            fi
          fi
          echo "package-dir=$PACKAGE_DIR" >> $GITHUB_OUTPUT

      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        with:
          path: ${{ steps.detect-path.outputs.package-dir }}

      - name: Setup tag format
        id: tag-format
        run: |
          if [[ "${{ inputs.tag_prefix }}" == "v" ]]; then
            TAG_NAME="v${{ steps.package-version.outputs.current-version }}"
          else
            TAG_NAME="${{ inputs.tag_prefix }}/${{ steps.package-version.outputs.current-version }}"
          fi
          echo "tag-name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Using tag format: $TAG_NAME"

      - name: Check if version in package.json is bumped
        run: |
          TAG_NAME="${{ steps.tag-format.outputs.tag-name }}"
          if git tag --list | grep -q "^$TAG_NAME$"; then
            echo "::error::Tag $TAG_NAME already exists, version in package.json file hasn't been bumped. Exiting."
            exit 1
          else
            echo "Tag $TAG_NAME does not exist. Proceeding."
          fi

      - name: Create Git tag
        run: |
          git config user.email "devops@urbansportsclub.com"
          git config user.name "DevOpsFit"
          git tag "${{ steps.tag-format.outputs.tag-name }}"
          git push origin "${{ steps.tag-format.outputs.tag-name }}"

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ steps.tag-format.outputs.tag-name }}"
          name: "Release ${{ steps.tag-format.outputs.tag-name }}"
          generate_release_notes: ${{ inputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
