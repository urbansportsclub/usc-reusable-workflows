---
name: Sonarqube

on:
  workflow_call:
    inputs:
      url:
        required: false
        type: string
        default: https://sonarqube.svc.urbansportsclub.tech
      enable_quality_gate:
        required: false
        type: boolean
        default: true
      download_coverage_artifact:
        required: false
        type: boolean
        default: false
      coverage_artifact_name:
        required: false
        type: string
        default: coverage-artifact
      artifact_download_path:
        required: false
        type: string
      reference_branch:
        required: false
        type: string
      is_dotnet_project:
        required: false
        type: boolean
        default: false

jobs:
  build:
    name: Build
    runs-on: [self-hosted, nonroot]
    env:
      REFERENCE_BRANCH: ${{ inputs.reference_branch || github.event.repository.default_branch }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Download code coverage results
        if: inputs.download_coverage_artifact == true
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.coverage_artifact_name }}
          path: ${{inputs.artifact_download_path}}

      - name: Scan
        uses: sonarsource/sonarqube-scan-action@master
        if: ${{ always() && github.ref == format('refs/heads/{0}', env.REFERENCE_BRANCH) }}
        with:
          args: -Dsonar.projectVersion=${{ github.sha }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ inputs.url }}

      - name: .NET installation
        if: ${{ github.ref != format('refs/heads/{0}', env.REFERENCE_BRANCH) && inputs.is_dotnet_project == true }}
        uses: ./.github/actions/setup-dotnet
        with:
          dotnet_version: 9.0.x

      - name: Java installation
        if: ${{ github.ref != format('refs/heads/{0}', env.REFERENCE_BRANCH) && inputs.is_dotnet_project == true }}
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: .NET SonarScanner
        if: ${{ github.ref != format('refs/heads/{0}', env.REFERENCE_BRANCH) && inputs.is_dotnet_project == true }}
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Add .NET tools to PATH
        if: ${{ github.ref != format('refs/heads/{0}', env.REFERENCE_BRANCH) && inputs.is_dotnet_project == true }}
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Get Sonar Project Key
        id: get_project_key
        if: ${{ github.ref != format('refs/heads/{0}', env.REFERENCE_BRANCH) && inputs.is_dotnet_project == true }}
        run: |
          key=$(grep "^sonar.projectKey=" sonarproject | cut -d'=' -f2) && echo "projectkey=$key" >> $GITHUB_OUTPUT

      - name: Download code coverage results
        if: ${{ github.ref != format('refs/heads/{0}', env.REFERENCE_BRANCH) && inputs.is_dotnet_project == true }}
        uses: actions/download-artifact@v4
        with:
          name: dotnet-coverage-xml
          path: TestResults/coverage.xml

      - name: .NET SonarScanner Begin
        if: ${{ github.ref != format('refs/heads/{0}', env.REFERENCE_BRANCH) && inputs.is_dotnet_project == true }}
        run: dotnet sonarscanner begin /k:"${{ steps.get_project_key.outputs.projectkey }}" /d:sonar.host.url=${{ inputs.url }} /d:sonar.login=${{ secrets.SONAR_TOKEN }} /v:"${{ github.sha }}" /d:sonar.cs.opencover.reportPaths="TestResults/coverage.xml"

      - name: .NET Build
        if: ${{ github.ref != format('refs/heads/{0}', env.REFERENCE_BRANCH) && inputs.is_dotnet_project == true }}
        run: dotnet build

      - name: .NET SonarScanner End
        if: ${{ github.ref != format('refs/heads/{0}', env.REFERENCE_BRANCH) && inputs.is_dotnet_project == true }}
        run: dotnet sonarscanner end /d:sonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Scan
        uses: sonarsource/sonarqube-scan-action@master
        if: ${{ inputs.is_dotnet_project != true && github.ref != format('refs/heads/{0}', env.REFERENCE_BRANCH) }}
        with:
          args: >
            -Dsonar.projectVersion=${{ github.sha }}
            -Dsonar.newCode.referenceBranch=${{ env.REFERENCE_BRANCH }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ inputs.url }}

      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      - uses: sonarsource/sonarqube-quality-gate-action@master
        if: ${{ inputs.is_dotnet_project == true && github.ref != format('refs/heads/{0}', env.REFERENCE_BRANCH) && inputs.enable_quality_gate == true }}
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - uses: sonarsource/sonarqube-quality-gate-action@master
        if: ${{ inputs.is_dotnet_project != true && github.ref != format('refs/heads/{0}', env.REFERENCE_BRANCH) && inputs.enable_quality_gate == true }}
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
